openapi: 3.0.3
info:
  title: Book Management API
  description: RESTful API for managing books with CRUD operations
  version: 1.0.0
  contact:
    name: API Support
    email: support@bookapi.com

servers:
  - url: http://localhost:5000/api/v1
    description: Development server

tags:
  - name: Books
    description: Operations related to book management

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Retrieve a list of all books in the system
      operationId: getBooks
      parameters:
        - name: title
          in: query
          description: Filter books by title (partial match)
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: Filter books by author (partial match)
          required: false
          schema:
            type: string
        - name: available
          in: query
          description: Filter by availability status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  count:
                    type: integer
                    example: 10
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Books
      summary: Create a new book
      description: Add a new book to the system
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Book created successfully
                  data:
                    $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{bookId}:
    get:
      tags:
        - Books
      summary: Get a book by ID
      description: Retrieve detailed information about a specific book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of the book to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Books
      summary: Update a book
      description: Update all fields of an existing book
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Book updated successfully
                  data:
                    $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - Books
      summary: Partially update a book
      description: Update specific fields of an existing book
      operationId: patchBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPatch'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Book updated successfully
                  data:
                    $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Books
      summary: Delete a book
      description: Remove a book from the system
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Unique identifier for the book
        title:
          type: string
          example: "Clean Code"
          description: Title of the book
        author:
          type: string
          example: "Robert C. Martin"
          description: Author of the book
        isbn:
          type: string
          example: "978-0132350884"
          description: ISBN number
        publisher:
          type: string
          example: "Prentice Hall"
          description: Publisher name
        year:
          type: integer
          example: 2008
          description: Publication year
        category:
          type: string
          example: "Programming"
          description: Book category
        quantity:
          type: integer
          example: 5
          description: Total quantity available
        available:
          type: boolean
          example: true
          description: Availability status
        description:
          type: string
          example: "A handbook of agile software craftsmanship"
          description: Book description
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T10:00:00Z"
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T10:00:00Z"
          description: Last update timestamp

    BookInput:
      type: object
      required:
        - title
        - author
        - isbn
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "Clean Code"
          description: Title of the book
        author:
          type: string
          minLength: 1
          maxLength: 100
          example: "Robert C. Martin"
          description: Author of the book
        isbn:
          type: string
          pattern: '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'
          example: "978-0132350884"
          description: ISBN number
        publisher:
          type: string
          maxLength: 100
          example: "Prentice Hall"
          description: Publisher name
        year:
          type: integer
          minimum: 1000
          maximum: 2100
          example: 2008
          description: Publication year
        category:
          type: string
          maxLength: 50
          example: "Programming"
          description: Book category
        quantity:
          type: integer
          minimum: 0
          default: 1
          example: 5
          description: Total quantity available
        description:
          type: string
          maxLength: 1000
          example: "A handbook of agile software craftsmanship"
          description: Book description

    BookPatch:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "Clean Code"
        author:
          type: string
          minLength: 1
          maxLength: 100
          example: "Robert C. Martin"
        isbn:
          type: string
          pattern: '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'
          example: "978-0132350884"
        publisher:
          type: string
          maxLength: 100
          example: "Prentice Hall"
        year:
          type: integer
          minimum: 1000
          maximum: 2100
          example: 2008
        category:
          type: string
          maxLength: 50
          example: "Programming"
        quantity:
          type: integer
          minimum: 0
          example: 5
        available:
          type: boolean
          example: true
        description:
          type: string
          maxLength: 1000
          example: "A handbook of agile software craftsmanship"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Error message"
        message:
          type: string
          example: "Detailed error description"

